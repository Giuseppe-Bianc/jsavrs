Mnemonic,Description,Parameters,Param_Count,Param_Types
AAA,ASCII Adjust After Addition,0,0,""
AAD,ASCII Adjust AX Before Division,1,1,"imm8"
AAM,ASCII Adjust AX After Multiply,1,1,"imm8"
AAS,ASCII Adjust AL After Subtraction,0,0,""
ADC,Add With Carry,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
ADCX,Unsigned Integer Addition of Two Operands With Carry Flag,2,2,"r32, r/m32", "r64, r/m64"
ADD,Add,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
ADDPD,Add Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ADDPS,Add Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ADDSD,Add Scalar Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
ADDSS,Add Scalar Single Precision Floating-Point Values,2,2,"xmm, m32", "xmm, xmm"
ADDSUBPD,Packed Double Precision Floating-Point Add/Subtract,2,2,"xmm, m128", "xmm, xmm"
ADDSUBPS,Packed Single Precision Floating-Point Add/Subtract,2,2,"xmm, m128", "xmm, xmm"
ADOX,Unsigned Integer Addition of Two Operands With Overflow Flag,2,2,"r32, r/m32", "r64, r/m64"
AESDEC,Perform One Round of an AES Decryption Flow,2,2,"xmm, m128", "xmm, xmm"
AESDEC128KL,Perform Ten Rounds of AES Decryption Flow With Key Locker Using 128-Bit Key,2,2,"xmm, m384"
AESDEC256KL,Perform 14 Rounds of AES Decryption Flow With Key Locker Using 256-Bit Key,2,2,"xmm, m512"
AESDECLAST,Perform Last Round of an AES Decryption Flow,2,2,"xmm, m128", "xmm, xmm"
AESDECWIDE128KL,Perform Ten Rounds of AES Decryption Flow With Key Locker on 8 Blocks Using 128-Bit Key,2,2,"xmm, m384"
AESDECWIDE256KL,Perform 14 Rounds of AES Decryption Flow With Key Locker on 8 Blocks Using 256-Bit Key,2,2,"xmm, m512"
AESENC,Perform One Round of an AES Encryption Flow,2,2,"xmm, m128", "xmm, xmm"
AESENC128KL,Perform Ten Rounds of AES Encryption Flow With Key Locker Using 128-Bit Key,2,2,"xmm, m384"
AESENC256KL,Perform 14 Rounds of AES Encryption Flow With Key Locker Using 256-Bit Key,2,2,"xmm, m512"
AESENCLAST,Perform Last Round of an AES Encryption Flow,2,2,"xmm, m128", "xmm, xmm"
AESENCWIDE128KL,Perform Ten Rounds of AES Encryption Flow With Key Locker on 8 Blocks Using 128-Bit Key,2,2,"xmm, m384"
AESENCWIDE256KL,Perform 14 Rounds of AES Encryption Flow With Key Locker on 8 Blocks Using 256-Bit Key,2,2,"xmm, m512"
AESIMC,Perform the AES InvMixColumn Transformation,2,2,"xmm, m128", "xmm, xmm"
AESKEYGENASSIST,AES Round Key Generation Assist,3,3,"xmm, m128, imm8"
AND,Logical AND,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
ANDN,Logical AND NOT,3,3,"r32, r32, r/m32", "r64, r64, r/m64"
ANDNPD,Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ANDNPS,Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ANDPD,Bitwise Logical AND of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ANDPS,Bitwise Logical AND of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ARPL,Adjust RPL Field of Segment Selector,2,2,"r/m16, r16"
BEXTR,Bit Field Extract,3,3,"r32, r/m32, r32", "r64, r/m64, r64"
BLENDPD,Blend Packed Double Precision Floating-Point Values,3,3,"xmm, m128, imm8"
BLENDPS,Blend Packed Single Precision Floating-Point Values,3,3,"xmm, m128, imm8"
BLENDVPD,Variable Blend Packed Double Precision Floating-Point Values,3,3,"xmm, m128, xmm"
BLENDVPS,Variable Blend Packed Single Precision Floating-Point Values,3,3,"xmm, m128, xmm"
BLSI,Extract Lowest Set Isolated Bit,2,2,"r32, r/m32", "r64, r/m64"
BLSMSK,Get Mask Up to Lowest Set Bit,2,2,"r32, r/m32", "r64, r/m64"
BLSR,Reset Lowest Set Bit,2,2,"r32, r/m32", "r64, r/m64"
BNDCL,Check Lower Bound,2,2,"bnd, m64"
BNDCN,Check Upper Bound,2,2,"bnd, m64"
BNDCU,Check Upper Bound,2,2,"bnd, m64"
BNDLDX,Load Extended Bounds Using Address Translation,2,2,"bnd, m"
BNDMK,Make Bounds,2,2,"bnd, m"
BNDMOV,Move Bounds,2,2,"bnd, bnd", "bnd, m128"
BNDSTX,Store Extended Bounds Using Address Translation,2,2,"m, bnd"
BOUND,Check Array Index Against Bounds,2,2,"r16, m16&16", "r32, m32&32"
BSF,Bit Scan Forward,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
BSR,Bit Scan Reverse,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
BSWAP,Byte Swap,1,1,"r32", "r64"
BT,Bit Test,2,2,"r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m16, imm8", "r/m32, imm8", "r/m64, imm8"
BTC,Bit Test and Complement,2,2,"r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m16, imm8", "r/m32, imm8", "r/m64, imm8"
BTR,Bit Test and Reset,2,2,"r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m16, imm8", "r/m32, imm8", "r/m64, imm8"
BTS,Bit Test and Set,2,2,"r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m16, imm8", "r/m32, imm8", "r/m64, imm8"
BZHI,Zero High Bits Starting with Specified Bit Position,3,3,"r32, r/m32, r32", "r64, r/m64, r64"
CALL,Call Procedure,1,1,"rel16", "rel32", "r/m16", "r/m32", "r/m64"
CBW,Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
CDQ,Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
CDQE,Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
CLAC,Clear AC Flag in EFLAGS Register,0,0,""
CLC,Clear Carry Flag,0,0,""
CLD,Clear Direction Flag,0,0,""
CLDEMOTE,Cache Line Demote,1,1,"m8"
CLFLUSH,Flush Cache Line,1,1,"m8"
CLFLUSHOPT,Flush Cache Line Optimized,1,1,"m8"
CLI,Clear Interrupt Flag,0,0,""
CLRSSBSY,Clear Busy Flag in a Supervisor Shadow Stack Token,1,1,"m64"
CLTS,Clear Task-Switched Flag in CR0,0,0,""
CLUI,Clear User Interrupt Flag,0,0,""
CLWB,Cache Line Write Back,1,1,"m8"
CMC,Complement Carry Flag,0,0,""
CMOVcc,Conditional Move,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
CMP,Compare Two Operands,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm8", "r/m16, imm16", "r/m32, imm8", "r/m32, imm32", "r/m64, imm8", "r/m64, imm32", "AL, imm8", "AX, imm8", "AX, imm16", "EAX, imm8", "EAX, imm32", "RAX, imm8", "RAX, imm32"
CMPPD,Compare Packed Double Precision Floating-Point Values,3,3,"xmm, m128, imm8"
CMPPS,Compare Packed Single Precision Floating-Point Values,3,3,"xmm, m128, imm8"
CMPS,Compare String Operands,0,0,""
CMPSB,Compare String Operands,0,0,""
CMPSD,Compare String Operands,0,0,""
CMPSD (1),Compare Scalar Double Precision Floating-Point Value,3,3,"xmm, m64, imm8"
CMPSQ,Compare String Operands,0,0,""
CMPSS,Compare Scalar Single Precision Floating-Point Value,3,3,"xmm, m32, imm8"
CMPSW,Compare String Operands,0,0,""
CMPXCHG,Compare and Exchange,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64"
CMPXCHG16B,Compare and Exchange Bytes,1,1,"m128"
CMPXCHG8B,Compare and Exchange Bytes,1,1,"m64"
COMISD,Compare Scalar Ordered Double Precision Floating-Point Values and Set EFLAGS,2,2,"xmm, m64", "xmm, xmm"
COMISS,Compare Scalar Ordered Single Precision Floating-Point Values and Set EFLAGS,2,2,"xmm, m32", "xmm, xmm"
CPUID,CPU Identification,0,0,""
CQO,Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
CRC32,Accumulate CRC32 Value,2,2,"r32, r/m8", "r32, r/m16", "r32, r/m32", "r64, r/m8", "r64, r/m64"
CVTDQ2PD,Convert Packed Doubleword Integers to Packed Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
CVTDQ2PS,Convert Packed Doubleword Integers to Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
CVTPD2DQ,Convert Packed Double Precision Floating-Point Values to Packed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
CVTPD2PI,Convert Packed Double Precision Floating-Point Values to Packed Dword Integers,2,2,"mm, m128", "mm, xmm"
CVTPD2PS,Convert Packed Double Precision Floating-Point Values to Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
CVTPI2PD,Convert Packed Dword Integers to Packed Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, mm"
CVTPI2PS,Convert Packed Dword Integers to Packed Single Precision Floating-Point Values,2,2,"xmm, m64", "xmm, mm"
CVTPS2DQ,Convert Packed Single Precision Floating-Point Values to Packed Signed Doubleword Integer Values,2,2,"xmm, m128", "xmm, xmm"
CVTPS2PD,Convert Packed Single Precision Floating-Point Values to Packed Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
CVTPS2PI,Convert Packed Single Precision Floating-Point Values to Packed Dword Integers,2,2,"mm, m64", "mm, xmm"
CVTSD2SI,Convert Scalar Double Precision Floating-Point Value to Doubleword Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
CVTSD2SS,Convert Scalar Double Precision Floating-Point Value to Scalar Single Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
CVTSI2SD,Convert Doubleword Integer to Scalar Double Precision Floating-Point Value,2,2,"xmm, r32", "xmm, m32", "xmm, r64", "xmm, m64"
CVTSI2SS,Convert Doubleword Integer to Scalar Single Precision Floating-Point Value,2,2,"xmm, r32", "xmm, m32", "xmm, r64", "xmm, m64"
CVTSS2SD,Convert Scalar Single Precision Floating-Point Value to Scalar Double Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
CVTSS2SI,Convert Scalar Single Precision Floating-Point Value to Doubleword Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
CVTTPD2DQ,Convert with Truncation Packed Double Precision Floating-Point Values to Packed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
CVTTPD2PI,Convert With Truncation Packed Double Precision Floating-Point Values to Packed Dword Integers,2,2,"mm, m128", "mm, xmm"
CVTTPS2DQ,Convert With Truncation Packed Single Precision Floating-Point Values to Packed Signed Doubleword Integer Values,2,2,"xmm, m128", "xmm, xmm"
CVTTPS2PI,Convert With Truncation Packed Single Precision Floating-Point Values to Packed Dword Integers,2,2,"mm, m64", "mm, xmm"
CVTTSD2SI,Convert With Truncation Scalar Double Precision Floating-Point Value to Signed Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
CVTTSS2SI,Convert With Truncation Scalar Single Precision Floating-Point Value to Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
CWD,Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
CWDE,Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to Quadword,0,0,""
DAA,Decimal Adjust AL After Addition,0,0,""
DAS,Decimal Adjust AL After Subtraction,0,0,""
DEC,Decrement by 1,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
DIV,Unsigned Divide,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
DIVPD,Divide Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
DIVPS,Divide Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
DIVSD,Divide Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
DIVSS,Divide Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
DPPD,Dot Product of Packed Double Precision Floating-Point Values,3,3,"xmm, m128, imm8"
DPPS,Dot Product of Packed Single Precision Floating-Point Values,3,3,"xmm, m128, imm8"
EMMS,Empty MMX Technology State,0,0,""
ENCODEKEY128,Encode 128-Bit Key With Key Locker,2,2,"r32, m384", "r64, m384"
ENCODEKEY256,Encode 256-Bit Key With Key Locker,2,2,"r32, m512", "r64, m512"
ENDBR32,Terminate an Indirect Branch in 32-bit and Compatibility Mode,0,0,""
ENDBR64,Terminate an Indirect Branch in 64-bit Mode,0,0,""
ENQCMD,Enqueue Command,2,2,"m64, m64"
ENQCMDS,Enqueue Command Supervisor,2,2,"m64, m64"
ENTER,Make Stack Frame for Procedure Parameters,2,2,"imm16, imm8"
EXTRACTPS,Extract Packed Floating-Point Values,3,3,"r/m32, xmm, imm8", "r/m64, xmm, imm8"
F2XM1,Compute 2x–1,0,0,""
FABS,Absolute Value,0,0,""
FADD,Add,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FADDP,Add,1,1,"ST(i), ST(0)"
FBLD,Load Binary Coded Decimal,1,1,"m80dec"
FBSTP,Store BCD Integer and Pop,1,1,"m80dec"
FCHS,Change Sign,0,0,""
FCLEX,Clear Exceptions,0,0,""
FCMOVcc,Floating-Point Conditional Move,1,1,"ST(0), ST(i)"
FCOM,Compare Floating-Point Values,1,1,"m32fp", "m64fp", "ST(i)"
FCOMI,Compare Floating-Point Values and Set EFLAGS,1,1,"ST(i), ST(0)"
FCOMIP,Compare Floating-Point Values and Set EFLAGS,1,1,"ST(i), ST(0)"
FCOMP,Compare Floating-Point Values,1,1,"m32fp", "m64fp", "ST(i)"
FCOMPP,Compare Floating-Point Values,0,0,""
FCOS,Cosine,0,0,""
FDECSTP,Decrement Stack-Top Pointer,0,0,""
FDIV,Divide,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FDIVP,Divide,1,1,"ST(i), ST(0)"
FDIVR,Reverse Divide,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FDIVRP,Reverse Divide,1,1,"ST(i), ST(0)"
FFREE,Free Floating-Point Register,1,1,"ST(i)"
FIADD,Add,1,1,"m32int", "m16int"
FICOM,Compare Integer,1,1,"m32int", "m16int"
FICOMP,Compare Integer,1,1,"m32int", "m16int"
FIDIV,Divide,1,1,"m32int", "m16int"
FIDIVR,Reverse Divide,1,1,"m32int", "m16int"
FILD,Load Integer,1,1,"m16int", "m32int", "m64int"
FIMUL,Multiply,1,1,"m32int", "m16int"
FINCSTP,Increment Stack-Top Pointer,0,0,""
FINIT,Initialize Floating-Point Unit,0,0,""
FIST,Store Integer,1,1,"m16int", "m32int"
FISTP,Store Integer,1,1,"m16int", "m32int", "m64int"
FISTTP,Store Integer With Truncation,1,1,"m16int", "m32int", "m64int"
FISUB,Subtract,1,1,"m32int", "m16int"
FISUBR,Reverse Subtract,1,1,"m32int", "m16int"
FLD,Load Floating-Point Value,1,1,"m32fp", "m64fp", "m80fp", "ST(i)"
FLD1,Load Constant,0,0,""
FLDCW,Load x87 FPU Control Word,1,1,"m2byte"
FLDENV,Load x87 FPU Environment,1,1,"m14/28byte"
FLDL2E,Load Constant,0,0,""
FLDL2T,Load Constant,0,0,""
FLDLG2,Load Constant,0,0,""
FLDLN2,Load Constant,0,0,""
FLDPI,Load Constant,0,0,""
FLDZ,Load Constant,0,0,""
FMUL,Multiply,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FMULP,Multiply,1,1,"ST(i), ST(0)"
FNCLEX,Clear Exceptions,0,0,""
FNINIT,Initialize Floating-Point Unit,0,0,""
FNOP,No Operation,0,0,""
FNSAVE,Store x87 FPU State,1,1,"m94/108byte"
FNSTCW,Store x87 FPU Control Word,1,1,"m2byte"
FNSTENV,Store x87 FPU Environment,1,1,"m14/28byte"
FNSTSW,Store x87 FPU Status Word,1,1,"m2byte", "AX"
FPATAN,Partial Arctangent,0,0,""
FPREM,Partial Remainder,0,0,""
FPREM1,Partial Remainder,0,0,""
FPTAN,Partial Tangent,0,0,""
FRNDINT,Round to Integer,0,0,""
FRSTOR,Restore x87 FPU State,1,1,"m94/108byte"
FSAVE,Store x87 FPU State,1,1,"m94/108byte"
FSCALE,Scale,0,0,""
FSIN,Sine,0,0,""
FSINCOS,Sine and Cosine,0,0,""
FSQRT,Square Root,0,0,""
FST,Store Floating-Point Value,1,1,"m32fp", "m64fp", "ST(i)"
FSTCW,Store x87 FPU Control Word,1,1,"m2byte"
FSTENV,Store x87 FPU Environment,1,1,"m14/28byte"
FSTP,Store Floating-Point Value,1,1,"m32fp", "m64fp", "m80fp", "ST(i)"
FSTSW,Store x87 FPU Status Word,1,1,"m2byte", "AX"
FSUB,Subtract,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FSUBP,Subtract,1,1,"ST(i), ST(0)"
FSUBR,Reverse Subtract,1,1,"m32fp", "m64fp", "ST(0), ST(i)", "ST(i), ST(0)"
FSUBRP,Reverse Subtract,1,1,"ST(i), ST(0)"
FTST,TEST,0,0,""
FUCOM,Unordered Compare Floating-Point Values,1,1,"ST(i)"
FUCOMI,Compare Floating-Point Values and Set EFLAGS,1,1,"ST(i), ST(0)"
FUCOMIP,Compare Floating-Point Values and Set EFLAGS,1,1,"ST(i), ST(0)"
FUCOMP,Unordered Compare Floating-Point Values,1,1,"ST(i)"
FUCOMPP,Unordered Compare Floating-Point Values,0,0,""
FWAIT,Wait,0,0,""
FXAM,Examine,0,0,""
FXCH,Exchange Registers,1,1,"ST(i)"
FXRSTOR,Restore x87 FPU, MMX, XMM, and MXCSR State,1,1,"m512byte"
FXRSTOR64,Restore x87 FPU, MMX, XMM, and MXCSR State,1,1,"m512byte"
FXSAVE,Save x87 FPU, MMX, XMM, and MXCSR State,1,1,"m512byte"
FXSAVE64,Save x87 FPU, MMX, XMM, and MXCSR State,1,1,"m512byte"
GETSEC,Get Security Features,1,1,"EAX"
HADDPD,Horizontal Add Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
HADDPS,Horizontal Add Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
HLT,Halt,0,0,""
HSUBPD,Horizontal Subtract Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
HSUBPS,Horizontal Subtract Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
IDIV,Signed Divide,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
IMUL,Signed Multiply,1,2,"r/m8", "r/m16", "r/m32", "r/m64", "r16, r/m16", "r32, r/m32", "r64, r/m64", "r16, r/m16, imm8", "r32, r/m32, imm8", "r32, r/m32, imm32", "r64, r/m64, imm8", "r64, r/m64, imm32"
IN,Input from Port,2,2,"AL, imm8", "AL, DX", "AX, imm8", "AX, DX", "EAX, imm8", "EAX, DX", "RAX, imm8", "RAX, DX"
INC,Increment by 1,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
INCSSPD,Increment Shadow Stack Pointer,1,1,"r32"
INCSSPQ,Increment Shadow Stack Pointer,1,1,"r64"
INS,Input from Port to String,0,0,""
INSB,Input from Port to String,0,0,""
INSD,Input from Port to String,0,0,""
INSW,Input from Port to String,0,0,""
INT,Interrupt,1,1,"imm8"
INT n,Interrupt to Vector,1,1,"imm8"
INT1,Interrupt 1 - Single Step,0,0,""
INT3,Interrupt 3 - Breakpoint,0,0,""
INTO,Interrupt on Overflow,0,0,""
INVD,Invalidate Internal Caches,0,0,""
INVEPT,Invalidate Translations Derived from EPT,2,2,"r64, m128"
INVLPG,Invalidate TLB Entry,1,1,"m"
INVLPGA,Invalidate TLB Entry in a Specified ASID,2,2,"rAX, ECX"
INVPCID,Invalidate Process-Context Identifier,2,2,"r64, m128"
INVVPID,Invalidate Translations Derived from VPID,2,2,"r64, m128"
IRET,Interrupt Return,0,0,""
IRETD,Interrupt Return,0,0,""
IRETQ,Interrupt Return,0,0,""
Jcc,Jump if Condition is Met,1,1,"rel8", "rel16", "rel32"
JMP,Jump,1,1,"rel8", "rel16", "rel32", "r/m16", "r/m32", "r/m64"
JMP FAR,Jump Far,1,1,"ptr16:16", "ptr16:32", "m16:16", "m16:32"
JMP NEAR,Jump Near,1,1,"rel8", "rel16", "rel32"
LAR,Load Access Rights Byte,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
LDDQU,Load Unaligned 128-bit Integer,2,2,"xmm, m128"
LDMXCSR,Load MXCSR Register,1,1,"m32"
LDS,Load Far Pointer,2,2,"r16, m16:32", "r32, m16:32"
LDT,Load Local Descriptor Table Register,1,1,"m16"
LEA,Load Effective Address,2,2,"r16, m", "r32, m", "r64, m"
LEAVE,High Level Procedure Exit,0,0,""
LES,Load Far Pointer,2,2,"r16, m16:32", "r32, m16:32"
LFENCE,Load Fence,0,0,""
LFS,Load Far Pointer,2,2,"r16, m16:32", "r32, m16:32", "r64, m16:64"
LGS,Load Far Pointer,2,2,"r16, m16:32", "r32, m16:32", "r64, m16:64"
LIDT,Load Interrupt Descriptor Table Register,1,1,"m16&32", "m16&64"
LLDT,Load Local Descriptor Table Register,1,1,"r/m16"
LMSW,Load Machine Status Word,1,1,"r/m16"
LOCK,Assert LOCK# Signal Prefix,0,0,""
LODS,Load String,0,0,""
LODSB,Load String,0,0,""
LODSD,Load String,0,0,""
LODSQ,Load String,0,0,""
LODSW,Load String,0,0,""
LOOP,Loop According to ECX Counter,1,1,"rel8"
LOOPE/LOOPZ,Loop According to ECX Counter,1,1,"rel8"
LOOPNE/LOOPNZ,Loop According to ECX Counter,1,1,"rel8"
LSL,Load Segment Limit,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
LSS,Load Far Pointer,2,2,"r16, m16:32", "r32, m16:32", "r64, m16:64"
LTR,Load Task Register,1,1,"r/m16"
LZCNT,Count Leading Zero Bits,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
MASKMOVDQU,Store Selected Bytes of Double Quadword,2,2,"xmm, xmm"
MASKMOVQ,Store Selected Bytes of Quadword,2,2,"mm, mm"
MAXPD,Return Maximum Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MAXPS,Return Maximum Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MAXSD,Return Maximum Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
MAXSS,Return Maximum Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
MFENCE,Memory Fence,0,0,""
MINPD,Return Minimum Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MINPS,Return Minimum Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MINSD,Return Minimum Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
MINSS,Return Minimum Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
MONITOR,Set Up Monitor Address,3,3,"rAX, ECX, EDX"
MOV,Move,2,2,"AL, m8", "AX, m16", "EAX, m32", "RAX, m64", "m8, AL", "m16, AX", "m32, EAX", "m64, RAX", "r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r8, r/m8", "r16, r/m16", "r32, r/m32", "r64, r/m64", "r8, imm8", "r16, imm16", "r32, imm32", "r64, imm32", "m8, imm8", "m16, imm16", "m32, imm32", "m64, imm32", "SREG, r/m16", "r/m16, SREG", "CRn, r32", "r32, CRn", "DRn, r32", "r32, DRn"
MOVAPD,Move Aligned Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVAPS,Move Aligned Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVBE,Move Data After Swapping Bytes,2,2,"r16, m16", "r32, m32", "r64, m64", "m16, r16", "m32, r32", "m64, r64"
MOVD,Move 32/64-bit Integer,2,2,"xmm, r/m32", "r/m32, xmm", "mm, r/m32", "r/m32, mm"
MOVDDUP,Move Duplicate One Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
MOVDIR64B,Move 64 Bytes as Direct Store,2,2,"r64, m512"
MOVDIRI,Move Doubleword as Direct Store,2,2,"r32, m32", "r64, m32"
MOVDQ2Q,Move Quadword from XMM to MMX Register,2,2,"mm, xmm"
MOVDQA,Move Aligned Packed Integer Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVDQU,Move Unaligned Packed Integer Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVHLPS,Move Packed Single Precision Floating-Point Values High to Low,2,2,"xmm, xmm"
MOVHPD,Move High Packed Double Precision Floating-Point Value,3,3,"xmm, m64", "m64, xmm"
MOVHPS,Move High Packed Single Precision Floating-Point Values,3,3,"xmm, m64", "m64, xmm"
MOVLHPS,Move Packed Single Precision Floating-Point Values Low to High,2,2,"xmm, xmm"
MOVLPD,Move Low Packed Double Precision Floating-Point Value,3,3,"xmm, m64", "m64, xmm"
MOVLPS,Move Low Packed Single Precision Floating-Point Values,3,3,"xmm, m64", "m64, xmm"
MOVMSKPD,Extract Packed Double Precision Floating-Point Sign Mask,2,2,"r32, xmm", "r64, xmm"
MOVMSKPS,Extract Packed Single Precision Floating-Point Sign Mask,2,2,"r32, xmm", "r64, xmm"
MOVNTDQ,Move Non-Temporal Double Quadword,2,2,"m128, xmm"
MOVNTDQA,Move Non-Temporal Double Quadword Aligned,2,2,"xmm, m128"
MOVNTI,Move Non-Temporal Doubleword,2,2,"m32, r32", "m64, r64"
MOVNTPD,Move Non-Temporal Aligned Packed Double Precision Floating-Point Values,2,2,"m128, xmm"
MOVNTPS,Move Non-Temporal Aligned Packed Single Precision Floating-Point Values,2,2,"m128, xmm"
MOVNTQ,Move Non-Temporal Quadword,2,2,"m64, mm"
MOVNTSD,Move Non-Temporal Scalar Double Precision Floating-Point Value,2,2,"m64, xmm"
MOVNTSS,Move Non-Temporal Scalar Single Precision Floating-Point Value,2,2,"m32, xmm"
MOVQ,Move Quadword,2,2,"mm, m64", "mm, mm", "m64, mm", "xmm, m64", "xmm, xmm", "m64, xmm", "r64, xmm", "xmm, r64"
MOVQ2DQ,Move Quadword from MMX to XMM Register,2,2,"xmm, mm"
MOVSB,Move Data from String to String,0,0,""
MOVSD,Move Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm", "m64, xmm"
MOVSHDUP,Move Packed Single Precision Floating-Point Values High and Duplicate,2,2,"xmm, m128", "xmm, xmm"
MOVSLDUP,Move Packed Single Precision Floating-Point Values Low and Duplicate,2,2,"xmm, m128", "xmm, xmm"
MOVSQ,Move Data from String to String,0,0,""
MOVSS,Move Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm", "m32, xmm"
MOVSW,Move Data from String to String,0,0,""
MOVSX,Move with Sign Extension,2,2,"r16, r/m8", "r32, r/m8", "r32, r/m16", "r64, r/m8", "r64, r/m16", "r64, r/m32"
MOVSXD,Move with Sign Extension,2,2,"r32, r/m32", "r64, r/m32"
MOVUPD,Move Unaligned Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVUPS,Move Unaligned Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "m128, xmm"
MOVZX,Move with Zero Extension,2,2,"r16, r/m8", "r32, r/m8", "r32, r/m16", "r64, r/m8", "r64, r/m16", "r64, r/m32"
MPSADBW,Compute Multiple Packed Sums of Absolute Difference,3,3,"xmm, m128, imm8"
MUL,Signed Multiply,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
MULPD,Multiply Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MULPS,Multiply Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
MULSD,Multiply Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
MULSS,Multiply Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
MWAIT,Monitor Wait,2,2,"EAX, ECX"
NEG,Two's Complement Negation,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
NOP,No Operation,0,0,""
NOT,One's Complement Negation,1,1,"r/m8", "r/m16", "r/m32", "r/m64"
OR,Logical OR,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
ORPD,Bitwise Logical OR of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
ORPS,Bitwise Logical OR of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
OUT,Output to Port,2,2,"imm8, AL", "imm8, AX", "imm8, EAX", "imm8, RAX", "DX, AL", "DX, AX", "DX, EAX", "DX, RAX"
OUTS,Output String to Port,0,0,""
OUTSB,Output String to Port,0,0,""
OUTSD,Output String to Port,0,0,""
OUTSW,Output String to Port,0,0,""
PABSB,Compute Absolute Value,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PABSD,Compute Absolute Value,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PABSW,Compute Absolute Value,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PACKSSWB,Pack with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PACKSSDW,Pack with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PACKUSWB,Pack with Unsigned Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDB,Add Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDD,Add Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDQ,Add Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDSB,Add Packed Signed Integers with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDSW,Add Packed Signed Integers with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDUSB,Add Packed Unsigned Integers with Unsigned Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDUSW,Add Packed Unsigned Integers with Unsigned Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PADDW,Add Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PALIGNR,Align Concatenated Doublewords,3,3,"mm, m64, imm8", "mm, mm, imm8", "xmm, m128, imm8", "xmm, xmm, imm8"
PAND,Bitwise Logical AND,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PANDN,Bitwise Logical AND NOT,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PAUSE,Spin Loop Hint,0,0,""
PAVGB,Compute Average of Packed Unsigned Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PAVGW,Compute Average of Packed Unsigned Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PBLENDVB,Conditional Blend Packed Bytes,3,3,"xmm, m128, xmm"
PBLENDW,Conditional Blend Packed Words,3,3,"xmm, m128, imm8"
PCLMULQDQ,Carry-Less Multiplication of Quadwords,3,3,"xmm, m128, imm8"
PCMPEQB,Compare Packed Data for Equal,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPEQD,Compare Packed Data for Equal,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPEQQ,Compare Packed Data for Equal,2,2,"xmm, m128", "xmm, xmm"
PCMPEQW,Compare Packed Data for Equal,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPESTRI,Packed Compare Explicit Length Strings, Return Index,4,4,"xmm, m128, xmm, imm8"
PCMPESTRM,Packed Compare Explicit Length Strings, Return Mask,4,4,"xmm, m128, xmm, imm8"
PCMPGTB,Compare Packed Signed Integers for Greater Than,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPGTD,Compare Packed Signed Integers for Greater Than,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPGTQ,Compare Packed Signed Integers for Greater Than,2,2,"xmm, m128", "xmm, xmm"
PCMPGTW,Compare Packed Signed Integers for Greater Than,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PCMPISTRI,Packed Compare Implicit Length Strings, Return Index,3,3,"xmm, m128, imm8"
PCMPISTRM,Packed Compare Implicit Length Strings, Return Mask,3,3,"xmm, m128, imm8"
PDEP,Parallel Bits Deposit,3,3,"r32, r32, r/m32", "r64, r64, r/m64"
PEXT,Parallel Bits Extract,3,3,"r32, r32, r/m32", "r64, r64, r/m64"
PEXTRB,Extract Byte,3,3,"r/m8, xmm, imm8"
PEXTRD,Extract Dword,3,3,"r/m32, xmm, imm8"
PEXTRQ,Extract Qword,3,3,"r/m64, xmm, imm8"
PEXTRW,Extract Word,3,3,"r/m16, mm, imm8", "r32, xmm, imm8"
PF2ID,Packed Single-precision FP to Integer Conversion,2,2,"mm, m64", "mm, mm"
PF2IW,Packed Single-precision FP to Integer Word Conversion,2,2,"mm, m64", "mm, mm"
PFACC,Packed Single-precision FP Accumulate,2,2,"mm, m64", "mm, mm"
PFADD,Packed Single-precision FP Add,2,2,"mm, m64", "mm, mm"
PFCMPEQ,Packed Single-precision FP Compare Equal,2,2,"mm, m64", "mm, mm"
PFCMPGE,Packed Single-precision FP Compare Greater or Equal,2,2,"mm, m64", "mm, mm"
PFCMPGT,Packed Single-precision FP Compare Greater,2,2,"mm, m64", "mm, mm"
PFMAX,Packed Single-precision FP Maximum,2,2,"mm, m64", "mm, mm"
PFMIN,Packed Single-precision FP Minimum,2,2,"mm, m64", "mm, mm"
PFMUL,Packed Single-precision FP Multiply,2,2,"mm, m64", "mm, mm"
PFNACC,Packed Single-precision FP Negative Accumulate,2,2,"mm, m64", "mm, mm"
PFNACC,Packed Single-precision FP Negative Accumulate,2,2,"mm, m64", "mm, mm"
PFPNACC,Packed Single-precision FP Positive Negative Accumulate,2,2,"mm, m64", "mm, mm"
PFRCP,Packed Single-precision FP Reciprocal,2,2,"mm, m64", "mm, mm"
PFRCPIT1,Packed Single-precision FP Reciprocal Interpolation Step 1,2,2,"mm, m64", "mm, mm"
PFRCPIT2,Packed Single-precision FP Reciprocal Interpolation Step 2,2,2,"mm, m64", "mm, mm"
PFRSQIT1,Packed Single-precision FP Reciprocal Square Root Interpolation Step 1,2,2,"mm, m64", "mm, mm"
PFRSQRT,Packed Single-precision FP Reciprocal Square Root,2,2,"mm, m64", "mm, mm"
PFSUB,Packed Single-precision FP Subtract,2,2,"mm, m64", "mm, mm"
PFSUBR,Packed Single-precision FP Subtract Reverse,2,2,"mm, m64", "mm, mm"
PHADDD,Packed Horizontal Add,2,2,"xmm, m128", "xmm, xmm"
PHADDSW,Packed Horizontal Add and Saturate,2,2,"xmm, m128", "xmm, xmm"
PHADDW,Packed Horizontal Add,2,2,"xmm, m128", "xmm, xmm"
PHMINPOSUW,Packed Horizontal Minimum,2,2,"xmm, m128", "xmm, xmm"
PHSUBD,Packed Horizontal Subtract,2,2,"xmm, m128", "xmm, xmm"
PHSUBSW,Packed Horizontal Subtract and Saturate,2,2,"xmm, m128", "xmm, xmm"
PHSUBW,Packed Horizontal Subtract,2,2,"xmm, m128", "xmm, xmm"
PI2FD,Packed Integer to Single-precision FP Conversion,2,2,"mm, m64", "mm, mm"
PI2FW,Packed Integer to Single-precision FP Word Conversion,2,2,"mm, m64", "mm, mm"
PINSRB,Insert Byte,3,3,"xmm, r/m8, imm8"
PINSRD,Insert Dword,3,3,"xmm, r/m32, imm8"
PINSRQ,Insert Qword,3,3,"xmm, r/m64, imm8"
PINSRW,Insert Word,3,3,"mm, r/m16, imm8", "xmm, r/m16, imm8"
PMADDUBSW,Packed Multiply and Add Unsigned and Signed Bytes,2,2,"xmm, m128", "xmm, xmm"
PMADDWD,Packed Multiply and Add,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMAXSB,Maximum of Packed Signed Byte Integers,2,2,"xmm, m128", "xmm, xmm"
PMAXSD,Maximum of Packed Signed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
PMAXSW,Maximum of Packed Signed Word Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMAXUB,Maximum of Packed Unsigned Byte Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMAXUD,Maximum of Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
PMAXUW,Maximum of Packed Unsigned Word Integers,2,2,"xmm, m128", "xmm, xmm"
PMINSB,Minimum of Packed Signed Byte Integers,2,2,"xmm, m128", "xmm, xmm"
PMINSD,Minimum of Packed Signed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
PMINSW,Minimum of Packed Signed Word Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMINUB,Minimum of Packed Unsigned Byte Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMINUD,Minimum of Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm"
PMINUW,Minimum of Packed Unsigned Word Integers,2,2,"xmm, m128", "xmm, xmm"
PMOVSXBW,Move with Sign Extension,2,2,"xmm, m64", "xmm, xmm"
PMOVSXBD,Move with Sign Extension,2,2,"xmm, m32", "xmm, xmm"
PMOVSXBQ,Move with Sign Extension,2,2,"xmm, m16", "xmm, xmm"
PMOVSXWD,Move with Sign Extension,2,2,"xmm, m64", "xmm, xmm"
PMOVSXWQ,Move with Sign Extension,2,2,"xmm, m32", "xmm, xmm"
PMOVSXDQ,Move with Sign Extension,2,2,"xmm, m64", "xmm, xmm"
PMOVZXBW,Move with Zero Extension,2,2,"xmm, m64", "xmm, xmm"
PMOVZXBD,Move with Zero Extension,2,2,"xmm, m32", "xmm, xmm"
PMOVZXBQ,Move with Zero Extension,2,2,"xmm, m16", "xmm, xmm"
PMOVZXWD,Move with Zero Extension,2,2,"xmm, m64", "xmm, xmm"
PMOVZXWQ,Move with Zero Extension,2,2,"xmm, m32", "xmm, xmm"
PMOVZXDQ,Move with Zero Extension,2,2,"xmm, m64", "xmm, xmm"
PMULDQ,Packed Multiply Doubleword,2,2,"xmm, m128", "xmm, xmm"
PMULHRSW,Packed Multiply High with Round and Scale,2,2,"xmm, m128", "xmm, xmm"
PMULHRW,Packed Multiply High with Round,2,2,"mm, m64", "mm, mm"
PMULHUW,Packed Multiply High Unsigned,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMULHW,Packed Multiply High Signed,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMULLD,Packed Multiply Low Doubleword,2,2,"xmm, m128", "xmm, xmm"
PMULLW,Packed Multiply Low Signed,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PMULUDQ,Packed Multiply Unsigned Doubleword,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
POP,Pop a Value from the Stack,1,1,"r16", "r32", "r64", "m16", "m32", "m64"
POPA,Pop All into General-Purpose Registers,0,0,""
POPAD,Pop All into General-Purpose Registers,0,0,""
POPCNT,Return the Count of Number of Bits Set to 1,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
POPF,Pop Stack into EFLAGS Register,0,0,""
POPFD,Pop Stack into EFLAGS Register,0,0,""
POPFQ,Pop Stack into RFLAGS Register,0,0,""
POR,Bitwise Logical OR,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PREFETCH,Prefetch Data Into Caches,1,1,"m8"
PREFETCHNTA,Prefetch Data Into Caches,1,1,"m8"
PREFETCHT0,Prefetch Data Into Caches,1,1,"m8"
PREFETCHT1,Prefetch Data Into Caches,1,1,"m8"
PREFETCHT2,Prefetch Data Into Caches,1,1,"m8"
PREFETCHW,Prefetch Data Into Caches,1,1,"m8"
PSADBW,Compute Sum of Absolute Differences,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSHUFB,Packed Shuffle Bytes,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSHUFD,Packed Shuffle Dwords,3,3,"xmm, m128, imm8"
PSHUFHW,Packed Shuffle High Words,3,3,"xmm, m128, imm8"
PSHUFLW,Packed Shuffle Low Words,3,3,"xmm, m128, imm8"
PSIGNB,Packed Sign,2,2,"xmm, m128", "xmm, xmm"
PSIGND,Packed Sign,2,2,"xmm, m128", "xmm, xmm"
PSIGNW,Packed Sign,2,2,"xmm, m128", "xmm, xmm"
PSLLD,Shift Packed Data Left Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSLLDQ,Shift Packed Data Left Logical,2,2,"xmm, imm8"
PSLLQ,Shift Packed Data Left Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSLLW,Shift Packed Data Left Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSRAD,Shift Packed Data Right Arithmetic,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSRAW,Shift Packed Data Right Arithmetic,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSRLD,Shift Packed Data Right Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSRLDQ,Shift Packed Data Right Logical,2,2,"xmm, imm8"
PSRLQ,Shift Packed Data Right Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSRLW,Shift Packed Data Right Logical,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm", "xmm, imm8"
PSUBB,Subtract Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBD,Subtract Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBQ,Subtract Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBSB,Subtract Packed Signed Integers with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBSW,Subtract Packed Signed Integers with Signed Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBUSB,Subtract Packed Unsigned Integers with Unsigned Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBUSW,Subtract Packed Unsigned Integers with Unsigned Saturation,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSUBW,Subtract Packed Integers,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PSWAPD,Packed Swap Doubleword,2,2,"mm, m64", "mm, mm"
PTEST,Logical Compare,2,2,"xmm, m128", "xmm, xmm"
PUNPCKHBQ,Unpack High Data,2,2,"mm, m64", "mm, mm"
PUNPCKHBW,Unpack High Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUNPCKHDQ,Unpack High Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUNPCKHQDQ,Unpack High Data,2,2,"xmm, m128", "xmm, xmm"
PUNPCKHWD,Unpack High Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUNPCKLBQ,Unpack Low Data,2,2,"mm, m64", "mm, mm"
PUNPCKLBW,Unpack Low Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUNPCKLDQ,Unpack Low Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUNPCKLQDQ,Unpack Low Data,2,2,"xmm, m128", "xmm, xmm"
PUNPCKLWD,Unpack Low Data,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
PUSH,Push Value onto Stack,1,1,"r16", "r32", "r64", "m16", "m32", "m64", "imm8", "imm16", "imm32"
PUSHA,Push All General-Purpose Registers onto Stack,0,0,""
PUSHAD,Push All General-Purpose Registers onto Stack,0,0,""
PUSHF,Push EFLAGS Register onto Stack,0,0,""
PUSHFD,Push EFLAGS Register onto Stack,0,0,""
PUSHFQ,Push RFLAGS Register onto Stack,0,0,""
PXOR,Bitwise Logical XOR,2,2,"mm, m64", "mm, mm", "xmm, m128", "xmm, xmm"
RCL,Rotate Carry Left,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
RCR,Rotate Carry Right,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
RDFSBASE,Read FS Base Address,1,1,"r32", "r64"
RDGSBASE,Read GS Base Address,1,1,"r32", "r64"
RDPKRU,Read Protection Key for User Pages,0,0,""
RDPMC,Read Performance-Monitoring Counters,0,0,""
RDRAND,Read Random Number,1,1,"r16", "r32", "r64"
RDSEED,Read Random Seed,1,1,"r16", "r32", "r64"
RDTSC,Read Time-Stamp Counter,0,0,""
RET,Return from Procedure,0,1,"imm16"
RETF,Return from Procedure,0,1,"imm16"
ROL,Rotate Left,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
ROR,Rotate Right,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
RORX,Rotate Right Without Affecting Flags,3,3,"r32, r/m32, imm8", "r64, r/m64, imm8"
ROUNDPD,Round Packed Double Precision Floating-Point Values,3,3,"xmm, m128, imm8"
ROUNDPS,Round Packed Single Precision Floating-Point Values,3,3,"xmm, m128, imm8"
ROUNDSD,Round Scalar Double Precision Floating-Point Value,3,3,"xmm, m64, imm8"
ROUNDSS,Round Scalar Single Precision Floating-Point Value,3,3,"xmm, m32, imm8"
RSM,Resume from System Management Mode,0,0,""
RSQRTPS,Compute Reciprocal Square Roots of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
RSQRTSS,Compute Reciprocal Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
SAHF,Store AH into Flags,0,0,""
SAL,Shift Arithmetic Left,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
SAR,Shift Arithmetic Right,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
SBB,Subtract With Borrow,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
SCAS,Compare String Operands,0,0,""
SCASB,Compare String Operands,0,0,""
SCASD,Compare String Operands,0,0,""
SCASQ,Compare String Operands,0,0,""
SCASW,Compare String Operands,0,0,""
SETcc,Set Byte on Condition,1,1,"r/m8"
SFENCE,Store Fence,0,0,""
SGDT,Store Global Descriptor Table Register,1,1,"m"
SHL,Shift Left,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
SHLD,Double Precision Shift Left,3,3,"r/m16, r16, imm8", "r/m16, r16, CL", "r/m32, r32, imm8", "r/m32, r32, CL", "r/m64, r64, imm8", "r/m64, r64, CL"
SHR,Shift Right,2,2,"r/m8, 1", "r/m8, CL", "r/m8, imm8", "r/m16, 1", "r/m16, CL", "r/m16, imm8", "r/m32, 1", "r/m32, CL", "r/m32, imm8", "r/m64, 1", "r/m64, CL", "r/m64, imm8"
SHRD,Double Precision Shift Right,3,3,"r/m16, r16, imm8", "r/m16, r16, CL", "r/m32, r32, imm8", "r/m32, r32, CL", "r/m64, r64, imm8", "r/m64, r64, CL"
SHUFPD,Shuffle Packed Double Precision Floating-Point Values,3,3,"xmm, m128, imm8"
SHUFPS,Shuffle Packed Single Precision Floating-Point Values,3,3,"xmm, m128, imm8"
SIDT,Store Interrupt Descriptor Table Register,1,1,"m"
SKINIT,Secure Init,1,1,"r32"
SLDT,Store Local Descriptor Table Register,1,1,"r/m16"
SLWPCB,Store Lightweight PC-Breakpoint,1,1,"m64"
SMSW,Store Machine Status Word,1,1,"r/m16"
SQRTPD,Compute Square Roots of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
SQRTPS,Compute Square Roots of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
SQRTSD,Compute Square Root of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
SQRTSS,Compute Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
STC,Set Carry Flag,0,0,""
STD,Set Direction Flag,0,0,""
STGI,Set Global Interrupt Flag,0,0,""
STI,Set Interrupt Flag,0,0,""
STMXCSR,Store MXCSR Register,1,1,"m32"
STOS,Store String,0,0,""
STOSB,Store String,0,0,""
STOSD,Store String,0,0,""
STOSQ,Store String,0,0,""
STOSW,Store String,0,0,""
STR,Store Task Register,1,1,"r/m16"
SUB,Subtract,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
SUBPD,Subtract Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
SUBPS,Subtract Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
SUBSD,Subtract Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
SUBSS,Subtract Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
SWAPGS,Swap GS Base Register,0,0,""
SYSENTER,System Call,0,0,""
SYSEXIT,System Return,0,0,""
TEST,Logical Compare,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
TZCNT,Count Trailing Zero Bits,2,2,"r16, r/m16", "r32, r/m32", "r64, r/m64"
UCOMISD,Unordered Compare Scalar Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
UCOMISS,Unordered Compare Scalar Single Precision Floating-Point Values,2,2,"xmm, m32", "xmm, xmm"
UD2,Undefined Instruction,0,0,""
UNPCKHPD,Unpack and Interleave High Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
UNPCKHPS,Unpack and Interleave High Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
UNPCKLPD,Unpack and Interleave Low Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
UNPCKLPS,Unpack and Interleave Low Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VADDPD,Add Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VADDPS,Add Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VADDSD,Add Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VADDSS,Add Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VADDSUBPD,Packed Double Precision Floating-Point Add/Subtract,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VADDSUBPS,Packed Single Precision Floating-Point Add/Subtract,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VAESDEC,Perform One Round of an AES Decryption Flow,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VAESDECLAST,Perform Last Round of an AES Decryption Flow,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VAESENC,Perform One Round of an AES Encryption Flow,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VAESENCLAST,Perform Last Round of an AES Encryption Flow,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VAESIMC,Perform the AES InvMixColumn Transformation,2,2,"xmm, m128", "xmm, xmm"
VAESKEYGENASSIST,AES Round Key Generation Assist,3,3,"xmm, m128, imm8"
VANDNPD,Bitwise Logical AND NOT of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VANDNPS,Bitwise Logical AND NOT of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VANDPD,Bitwise Logical AND of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VANDPS,Bitwise Logical AND of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VBLENDPD,Blend Packed Double Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8"
VBLENDPS,Blend Packed Single Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8"
VBLENDVPD,Variable Blend Packed Double Precision Floating-Point Values,4,4,"xmm, xmm, m128, xmm", "xmm, xmm, xmm, xmm"
VBLENDVPS,Variable Blend Packed Single Precision Floating-Point Values,4,4,"xmm, xmm, m128, xmm", "xmm, xmm, xmm, xmm"
VBROADCASTF128,Broadcast 128-bit Floating-Point,2,2,"ymm, m128", "ymm, xmm"
VBROADCASTI128,Broadcast 128-bit Integer,2,2,"ymm, m128", "ymm, xmm"
VBROADCASTSD,Broadcast Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VBROADCASTSS,Broadcast Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VCMPPD,Compare Packed Double Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8"
VCMPPS,Compare Packed Single Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8"
VCMPSD,Compare Scalar Double Precision Floating-Point Value,4,4,"xmm, xmm, m64, imm8", "xmm, xmm, xmm, imm8"
VCMPSS,Compare Scalar Single Precision Floating-Point Value,4,4,"xmm, xmm, m32, imm8", "xmm, xmm, xmm, imm8"
VCOMISD,Compare Scalar Ordered Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
VCOMISS,Compare Scalar Ordered Single Precision Floating-Point Values,2,2,"xmm, m32", "xmm, xmm"
VCVTDQ2PD,Convert Packed Doubleword Integers to Packed Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm", "xmm, m128", "xmm, xmm"
VCVTDQ2PS,Convert Packed Doubleword Integers to Packed Single Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm", "xmm, m128", "xmm, xmm"
VCVTPD2DQ,Convert Packed Double Precision Floating-Point Values to Packed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTPD2PS,Convert Packed Double Precision Floating-Point Values to Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTPD2UDQ,Convert Packed Double Precision Floating-Point Values to Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTPH2PS,Convert Packed Half Precision Floating-Point Values to Packed Single Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm", "xmm, m128", "xmm, xmm"
VCVTPS2DQ,Convert Packed Single Precision Floating-Point Values to Packed Signed Doubleword Integer Values,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTPS2PD,Convert Packed Single Precision Floating-Point Values to Packed Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm", "ymm, m128", "ymm, xmm"
VCVTPS2UDQ,Convert Packed Single Precision Floating-Point Values to Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTPS2PH,Convert Packed Single Precision Floating-Point Values to Packed Half Precision Floating-Point Values,3,3,"m64, xmm, imm8", "m128, ymm, imm8", "m64, xmm, imm8"
VCVTSD2SI,Convert Scalar Double Precision Floating-Point Value to Doubleword Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
VCVTSD2SS,Convert Scalar Double Precision Floating-Point Value to Scalar Single Precision Floating-Point Value,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VCVTSD2USI,Convert Scalar Double Precision Floating-Point Value to Unsigned Doubleword Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
VCVTSI2SD,Convert Doubleword Integer to Scalar Double Precision Floating-Point Value,3,3,"xmm, r32, m32", "xmm, r32, xmm", "xmm, r64, m64", "xmm, r64, xmm"
VCVTSI2SS,Convert Doubleword Integer to Scalar Single Precision Floating-Point Value,3,3,"xmm, r32, m32", "xmm, r32, xmm", "xmm, r64, m64", "xmm, r64, xmm"
VCVTSS2SD,Convert Scalar Single Precision Floating-Point Value to Scalar Double Precision Floating-Point Value,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VCVTSS2SI,Convert Scalar Single Precision Floating-Point Value to Doubleword Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
VCVTSS2USI,Convert Scalar Single Precision Floating-Point Value to Unsigned Doubleword Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
VCVTTPD2DQ,Convert with Truncation Packed Double Precision Floating-Point Values to Packed Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTTPD2UDQ,Convert with Truncation Packed Double Precision Floating-Point Values to Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTTPS2DQ,Convert with Truncation Packed Single Precision Floating-Point Values to Packed Signed Doubleword Integer Values,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTTPS2UDQ,Convert with Truncation Packed Single Precision Floating-Point Values to Packed Unsigned Doubleword Integers,2,2,"xmm, m128", "xmm, xmm", "xmm, m256", "xmm, ymm"
VCVTTSD2SI,Convert With Truncation Scalar Double Precision Floating-Point Value to Signed Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
VCVTTSD2USI,Convert With Truncation Scalar Double Precision Floating-Point Value to Unsigned Integer,2,2,"r32, m64", "r32, xmm", "r64, m64", "r64, xmm"
VCVTTSS2SI,Convert With Truncation Scalar Single Precision Floating-Point Value to Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
VCVTTSS2USI,Convert With Truncation Scalar Single Precision Floating-Point Value to Unsigned Integer,2,2,"r32, m32", "r32, xmm", "r64, m32", "r64, xmm"
VEXTRACTF128,Extract 128-bit Floating-Point,3,3,"xmm, ymm, imm8"
VEXTRACTI128,Extract 128-bit Integer,3,3,"xmm, ymm, imm8"
VEXTRACTPS,Extract Packed Floating-Point Values,3,3,"r/m32, xmm, imm8", "r/m64, xmm, imm8"
VFMADD132PD,Fused Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD132PS,Fused Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD132SD,Fused Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMADD132SS,Fused Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMADD213PD,Fused Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD213PS,Fused Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD213SD,Fused Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMADD213SS,Fused Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMADD231PD,Fused Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD231PS,Fused Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADD231SD,Fused Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMADD231SS,Fused Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMADDPD,Fused Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDPS,Fused Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSD,Fused Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMADDSS,Fused Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMADDSUB132PD,Fused Multiply-Add/Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUB132PS,Fused Multiply-Add/Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUB213PD,Fused Multiply-Add/Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUB213PS,Fused Multiply-Add/Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUB231PD,Fused Multiply-Add/Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUB231PS,Fused Multiply-Add/Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUBPD,Fused Multiply-Add/Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMADDSUBPS,Fused Multiply-Add/Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB132PD,Fused Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB132PS,Fused Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB132SD,Fused Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMSUB132SS,Fused Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMSUB213PD,Fused Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB213PS,Fused Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB213SD,Fused Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMSUB213SS,Fused Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMSUB231PD,Fused Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB231PS,Fused Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUB231SD,Fused Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMSUB231SS,Fused Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMSUBPD,Fused Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBPS,Fused Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBSD,Fused Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFMSUBSS,Fused Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFMSUBADD132PD,Fused Multiply-Subtract/Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADD132PS,Fused Multiply-Subtract/Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADD213PD,Fused Multiply-Subtract/Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADD213PS,Fused Multiply-Subtract/Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADD231PD,Fused Multiply-Subtract/Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADD231PS,Fused Multiply-Subtract/Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADDPD,Fused Multiply-Subtract/Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFMSUBADDPS,Fused Multiply-Subtract/Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD132PD,Fused Negative Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD132PS,Fused Negative Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD132SD,Fused Negative Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMADD132SS,Fused Negative Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMADD213PD,Fused Negative Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD213PS,Fused Negative Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD213SD,Fused Negative Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMADD213SS,Fused Negative Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMADD231PD,Fused Negative Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD231PS,Fused Negative Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADD231SD,Fused Negative Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMADD231SS,Fused Negative Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMADDPD,Fused Negative Multiply-Add of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADDPS,Fused Negative Multiply-Add of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMADDSD,Fused Negative Multiply-Add of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMADDSS,Fused Negative Multiply-Add of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMSUB132PD,Fused Negative Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB132PS,Fused Negative Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB132SD,Fused Negative Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMSUB132SS,Fused Negative Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMSUB213PD,Fused Negative Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB213PS,Fused Negative Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB213SD,Fused Negative Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMSUB213SS,Fused Negative Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMSUB231PD,Fused Negative Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB231PS,Fused Negative Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUB231SD,Fused Negative Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMSUB231SS,Fused Negative Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VFNMSUBPD,Fused Negative Multiply-Subtract of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUBPS,Fused Negative Multiply-Subtract of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VFNMSUBSD,Fused Negative Multiply-Subtract of Scalar Double Precision Floating-Point Values,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VFNMSUBSS,Fused Negative Multiply-Subtract of Scalar Single Precision Floating-Point Values,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VORPD,Bitwise Logical OR of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VORPS,Bitwise Logical OR of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPABSB,Compute Absolute Value,2,2,"xmm, m128", "xmm, xmm"
VPABSD,Compute Absolute Value,2,2,"xmm, m128", "xmm, xmm"
VPABSW,Compute Absolute Value,2,2,"xmm, m128", "xmm, xmm"
VPACKSSDW,Pack with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPACKSSWB,Pack with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPACKUSDW,Pack with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPACKUSWB,Pack with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDB,Add Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDD,Add Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDQ,Add Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDSB,Add Packed Signed Integers with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDSW,Add Packed Signed Integers with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDUSB,Add Packed Unsigned Integers with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDUSW,Add Packed Unsigned Integers with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPADDW,Add Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPALIGNR,Align Concatenated Doublewords,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8"
VPAND,Bitwise Logical AND,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPANDN,Bitwise Logical AND NOT,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPAVGB,Compute Average of Packed Unsigned Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPAVGW,Compute Average of Packed Unsigned Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPBLENDMB,Conditional Blend Packed Bytes,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPBLENDMD,Conditional Blend Packed Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPBLENDMW,Conditional Blend Packed Words,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPBROADCASTB,Broadcast Byte to All Elements,2,2,"xmm, m8", "xmm, xmm"
VPBROADCASTD,Broadcast Dword to All Elements,2,2,"xmm, m32", "xmm, xmm"
VPBROADCASTQ,Broadcast Qword to All Elements,2,2,"xmm, m64", "xmm, xmm"
VPBROADCASTW,Broadcast Word to All Elements,2,2,"xmm, m16", "xmm, xmm"
VPCMPB,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPD,Compare Packed Double Precision Floating-Point Values,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPQ,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPUB,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPUD,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPUQ,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCMPW,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMB,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMD,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMQ,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMUB,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMUD,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMUQ,Compare Packed Unsigned Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCOMW,Compare Packed Signed Integers,4,4,"k, xmm, m128, imm8", "k, xmm, xmm, imm8"
VPCONFLICT,Find Conflicts in Packed Data,2,2,"xmm, m128", "xmm, xmm"
VPCOMPRESSB,Compress Packed Bytes,3,3,"xmm, k, xmm"
VPCOMPRESSD,Compress Packed Dwords,3,3,"xmm, k, xmm"
VPCOMPRESSQ,Compress Packed Qwords,3,3,"xmm, k, xmm"
VPCOMPRESSW,Compress Packed Words,3,3,"xmm, k, xmm"
VPERM2F128,Permute Floating-Point Values,3,3,"ymm, ymm, m256", "ymm, ymm, ymm"
VPERM2I128,Permute Integer Values,3,3,"ymm, ymm, m256", "ymm, ymm, ymm"
VPERMD,Permute Packed Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "ymm, ymm, m256", "ymm, ymm, ymm"
VPERMF128,Permute Floating-Point Values,3,3,"ymm, ymm, m256", "ymm, ymm, ymm"
VPERMI2B,Permute Packed Bytes,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMI2D,Permute Packed Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMI2Q,Permute Packed Qwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMI2W,Permute Packed Words,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMILPD,Permute Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8", "xmm, xmm, imm8"
VPERMILPS,Permute Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8", "xmm, xmm, imm8"
VPERMPD,Permute Packed Double Precision Floating-Point Values,3,3,"ymm, ymm, m256", "ymm, ymm, ymm", "ymm, m256, imm8", "ymm, ymm, imm8"
VPERMPS,Permute Packed Single Precision Floating-Point Values,3,3,"ymm, ymm, m256", "ymm, ymm, ymm"
VPERMQ,Permute Packed Qwords,3,3,"ymm, ymm, m256", "ymm, ymm, ymm", "ymm, m256, imm8", "ymm, ymm, imm8"
VPERMT2B,Permute Packed Bytes,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMT2D,Permute Packed Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMT2Q,Permute Packed Qwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPERMT2W,Permute Packed Words,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPEXTRB,Extract Byte,3,3,"r/m8, xmm, imm8"
VPEXTRD,Extract Dword,3,3,"r/m32, xmm, imm8"
VPEXTRQ,Extract Qword,3,3,"r/m64, xmm, imm8"
VPEXTRW,Extract Word,3,3,"r/m16, xmm, imm8"
VPGATHERDD,Gather Packed Dwords with Dword Indices,4,4,"xmm, m128, xmm"
VPGATHERDQ,Gather Packed Qwords with Dword Indices,4,4,"xmm, m128, xmm"
VPGATHERQD,Gather Packed Dwords with Qword Indices,4,4,"xmm, m128, xmm"
VPGATHERQQ,Gather Packed Qwords with Qword Indices,4,4,"xmm, m128, xmm"
VPHADDD,Packed Horizontal Add,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPHADDSW,Packed Horizontal Add and Saturate,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPHADDW,Packed Horizontal Add,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPHMINPOSUW,Packed Horizontal Minimum,2,2,"xmm, m128", "xmm, xmm"
VPHSUBD,Packed Horizontal Subtract,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPHSUBSW,Packed Horizontal Subtract and Saturate,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPHSUBW,Packed Horizontal Subtract,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPINSRB,Insert Byte,4,4,"xmm, xmm, r/m8, imm8"
VPINSRD,Insert Dword,4,4,"xmm, xmm, r/m32, imm8"
VPINSRQ,Insert Qword,4,4,"xmm, xmm, r/m64, imm8"
VPINSRW,Insert Word,4,4,"xmm, xmm, r/m16, imm8"
VPMADDUBSW,Packed Multiply and Add Unsigned and Signed Bytes,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMADDWD,Packed Multiply and Add,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMASKMOVD,Conditional Move Packed Dwords,3,3,"xmm, k, m128", "m128, k, xmm"
VPMASKMOVQ,Conditional Move Packed Qwords,3,3,"xmm, k, m128", "m128, k, xmm"
VPMAXSB,Maximum of Packed Signed Byte Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMAXSD,Maximum of Packed Signed Doubleword Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMAXSW,Maximum of Packed Signed Word Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMAXUB,Maximum of Packed Unsigned Byte Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMAXUD,Maximum of Packed Unsigned Doubleword Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMAXUW,Maximum of Packed Unsigned Word Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINSB,Minimum of Packed Signed Byte Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINSD,Minimum of Packed Signed Doubleword Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINSW,Minimum of Packed Signed Word Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINUB,Minimum of Packed Unsigned Byte Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINUD,Minimum of Packed Unsigned Doubleword Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMINUW,Minimum of Packed Unsigned Word Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMOVB2M,Move Byte to Mask,2,2,"k, xmm"
VPMOVD2M,Move Dword to Mask,2,2,"k, xmm"
VPMOVDB,Downconvert Dwords to Bytes,2,2,"xmm, xmm", "m32, xmm"
VPMOVDW,Downconvert Dwords to Words,2,2,"xmm, xmm", "m64, xmm"
VPMOVM2B,Move Mask to Byte,2,2,"xmm, k"
VPMOVM2D,Move Mask to Dword,2,2,"xmm, k"
VPMOVM2Q,Move Mask to Qword,2,2,"xmm, k"
VPMOVM2W,Move Mask to Word,2,2,"xmm, k"
VPMOVQB,Downconvert Qwords to Bytes,2,2,"xmm, xmm", "m16, xmm"
VPMOVQD,Downconvert Qwords to Dwords,2,2,"xmm, xmm", "m64, xmm"
VPMOVQW,Downconvert Qwords to Words,2,2,"xmm, xmm", "m32, xmm"
VPMOVSDB,Downconvert Signed Dwords to Bytes,2,2,"xmm, xmm", "m32, xmm"
VPMOVSDW,Downconvert Signed Dwords to Words,2,2,"xmm, xmm", "m64, xmm"
VPMOVSQB,Downconvert Signed Qwords to Bytes,2,2,"xmm, xmm", "m16, xmm"
VPMOVSQD,Downconvert Signed Qwords to Dwords,2,2,"xmm, xmm", "m64, xmm"
VPMOVSQW,Downconvert Signed Qwords to Words,2,2,"xmm, xmm", "m32, xmm"
VPMOVSWB,Downconvert Signed Words to Bytes,2,2,"xmm, xmm", "m32, xmm"
VPMOVUSDB,Downconvert Unsigned Dwords to Bytes,2,2,"xmm, xmm", "m32, xmm"
VPMOVUSDW,Downconvert Unsigned Dwords to Words,2,2,"xmm, xmm", "m64, xmm"
VPMOVUSQB,Downconvert Unsigned Qwords to Bytes,2,2,"xmm, xmm", "m16, xmm"
VPMOVUSQD,Downconvert Unsigned Qwords to Dwords,2,2,"xmm, xmm", "m64, xmm"
VPMOVUSQW,Downconvert Unsigned Qwords to Words,2,2,"xmm, xmm", "m32, xmm"
VPMOVUSWB,Downconvert Unsigned Words to Bytes,2,2,"xmm, xmm", "m32, xmm"
VPMOVW2M,Move Word to Mask,2,2,"k, xmm"
VPMOVWB,Downconvert Words to Bytes,2,2,"xmm, xmm", "m16, xmm"
VPMULDQ,Packed Multiply Doubleword,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULHRSW,Packed Multiply High with Round and Scale,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULHUW,Packed Multiply High Unsigned,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULHW,Packed Multiply High Signed,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULLD,Packed Multiply Low Doubleword,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULLW,Packed Multiply Low Signed,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPMULUDQ,Packed Multiply Unsigned Doubleword,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPOR,Bitwise Logical OR,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPERMIL2PD,Permute Floating-Point Values,4,4,"xmm, xmm, xmm, m128", "xmm, xmm, xmm, xmm", "xmm, xmm, m128, imm8"
VPERMIL2PS,Permute Floating-Point Values,4,4,"xmm, xmm, xmm, m128", "xmm, xmm, xmm, xmm", "xmm, xmm, m128, imm8"
VPOPCNTB,Population Count of Bytes,2,2,"xmm, m128", "xmm, xmm"
VPOPCNTD,Population Count of Dwords,2,2,"xmm, m128", "xmm, xmm"
VPOPCNTQ,Population Count of Qwords,2,2,"xmm, m128", "xmm, xmm"
VPOPCNTW,Population Count of Words,2,2,"xmm, m128", "xmm, xmm"
VPREFETCH0,Prefetch Data Into Caches,1,1,"m8"
VPREFETCH1,Prefetch Data Into Caches,1,1,"m8"
VPREFETCH2,Prefetch Data Into Caches,1,1,"m8"
VPREFETCHENTA,Prefetch Data Into Caches,1,1,"m8"
VPREFETCHNTA,Prefetch Data Into Caches,1,1,"m8"
VPSCATTERDD,Scatter Packed Dwords with Dword Indices,3,3,"m128, xmm, xmm"
VPSCATTERDQ,Scatter Packed Qwords with Dword Indices,3,3,"m128, xmm, xmm"
VPSCATTERQD,Scatter Packed Dwords with Qword Indices,3,3,"m128, xmm, xmm"
VPSCATTERQQ,Scatter Packed Qwords with Qword Indices,3,3,"m128, xmm, xmm"
VPSHUFB,Packed Shuffle Bytes,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSHUFD,Packed Shuffle Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VPSHUFHW,Packed Shuffle High Words,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VPSHUFLW,Packed Shuffle Low Words,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VPSIGNB,Packed Sign,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSIGND,Packed Sign,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSIGNW,Packed Sign,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSLLD,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSLLDQ,Shift Packed Data Left Logical,3,3,"xmm, xmm, imm8"
VPSLLQ,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSLLVD,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSLLVQ,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSLLVW,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSLLW,Shift Packed Data Left Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSRAD,Shift Packed Data Right Arithmetic,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSRAVD,Shift Packed Data Right Arithmetic,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRAVQ,Shift Packed Data Right Arithmetic,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRAVW,Shift Packed Data Right Arithmetic,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRAW,Shift Packed Data Right Arithmetic,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSRLD,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSRLDQ,Shift Packed Data Right Logical,3,3,"xmm, xmm, imm8"
VPSRLQ,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSRLVD,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRLVQ,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRLVW,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm"
VPSRLW,Shift Packed Data Right Logical,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm", "xmm, xmm, imm8"
VPSUBB,Subtract Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBD,Subtract Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBQ,Subtract Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBSB,Subtract Packed Signed Integers with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBSW,Subtract Packed Signed Integers with Signed Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBUSB,Subtract Packed Unsigned Integers with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBUSW,Subtract Packed Unsigned Integers with Unsigned Saturation,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPSUBW,Subtract Packed Integers,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPTEST,Logical Compare,2,2,"xmm, m128", "xmm, xmm"
VPTESTMB,Test Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTMD,Test Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTMQ,Test Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTMW,Test Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTNMB,Test Not Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTNMD,Test Not Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTNMQ,Test Not Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPTESTNMW,Test Not Mask,3,3,"k, xmm, m128", "k, xmm, xmm"
VPUNPCKHBW,Unpack High Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKHDQ,Unpack High Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKHQDQ,Unpack High Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKHWD,Unpack High Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKLBW,Unpack Low Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKLDQ,Unpack Low Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKLQDQ,Unpack Low Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPUNPCKLWD,Unpack Low Data,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VPXOR,Bitwise Logical XOR,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VRCP14PD,Compute Reciprocal of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP14PS,Compute Reciprocal of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP14SD,Compute Reciprocal of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRCP14SS,Compute Reciprocal of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRCP23PD,Compute Reciprocal of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP23PS,Compute Reciprocal of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP23SD,Compute Reciprocal of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRCP23SS,Compute Reciprocal of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRCP28PD,Compute Reciprocal of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP28PS,Compute Reciprocal of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCP28SD,Compute Reciprocal of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRCP28SS,Compute Reciprocal of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRCPPS,Compute Reciprocal of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRCPSS,Compute Reciprocal of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRNDSCALEPD,Round Packed Double Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8", "ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VRNDSCALEPS,Round Packed Single Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8", "ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VRNDSCALESD,Round Scalar Double Precision Floating-Point Value,4,4,"xmm, xmm, m64, imm8", "xmm, xmm, xmm, imm8"
VRNDSCALESS,Round Scalar Single Precision Floating-Point Value,4,4,"xmm, xmm, m32, imm8", "xmm, xmm, xmm, imm8"
VROUNDPD,Round Packed Double Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8", "ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VROUNDPS,Round Packed Single Precision Floating-Point Values,4,4,"xmm, xmm, m128, imm8", "xmm, xmm, xmm, imm8", "ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VROUNDSD,Round Scalar Double Precision Floating-Point Value,4,4,"xmm, xmm, m64, imm8", "xmm, xmm, xmm, imm8"
VROUNDSS,Round Scalar Single Precision Floating-Point Value,4,4,"xmm, xmm, m32, imm8", "xmm, xmm, xmm, imm8"
VRSQRT14PD,Compute Reciprocal Square Root of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT14PS,Compute Reciprocal Square Root of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT14SD,Compute Reciprocal Square Root of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRSQRT14SS,Compute Reciprocal Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRSQRT23PD,Compute Reciprocal Square Root of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT23PS,Compute Reciprocal Square Root of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT23SD,Compute Reciprocal Square Root of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRSQRT23SS,Compute Reciprocal Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRSQRT28PD,Compute Reciprocal Square Root of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT28PS,Compute Reciprocal Square Root of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRT28SD,Compute Reciprocal Square Root of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VRSQRT28SS,Compute Reciprocal Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VRSQRTPS,Compute Reciprocal Square Root of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VRSQRTSS,Compute Reciprocal Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VSCATTERDD,Scatter Packed Dwords with Dword Indices,3,3,"m128, xmm, xmm"
VSCATTERDQ,Scatter Packed Qwords with Dword Indices,3,3,"m128, xmm, xmm"
VSCATTERQD,Scatter Packed Dwords with Qword Indices,3,3,"m128, xmm, xmm"
VSCATTERQQ,Scatter Packed Qwords with Qword Indices,3,3,"m128, xmm, xmm"
VSHUFF32X4,Shuffle Packed Single Precision Floating-Point Values,4,4,"ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VSHUFF64X2,Shuffle Packed Double Precision Floating-Point Values,4,4,"ymm, ymm, m256, imm8", "ymm, ymm, ymm, imm8"
VSHUFD,Shuffle Packed Dwords,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VSHUFPD,Shuffle Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VSHUFPS,Shuffle Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, imm8"
VSQRTPD,Compute Square Roots of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "ymm, m256", "ymm, ymm"
VSQRTPS,Compute Square Roots of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm", "ymm, m256", "ymm, ymm"
VSQRTSD,Compute Square Root of Scalar Double Precision Floating-Point Value,2,2,"xmm, m64", "xmm, xmm"
VSQRTSS,Compute Square Root of Scalar Single Precision Floating-Point Value,2,2,"xmm, m32", "xmm, xmm"
VSUBPD,Subtract Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VSUBPS,Subtract Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VSUBSD,Subtract Scalar Double Precision Floating-Point Value,3,3,"xmm, xmm, m64", "xmm, xmm, xmm", "xmm, m64, xmm"
VSUBSS,Subtract Scalar Single Precision Floating-Point Value,3,3,"xmm, xmm, m32", "xmm, xmm, xmm", "xmm, m32, xmm"
VTESTPD,Test Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VTESTPS,Test Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
VUCOMISD,Unordered Compare Scalar Double Precision Floating-Point Values,2,2,"xmm, m64", "xmm, xmm"
VUCOMISS,Unordered Compare Scalar Single Precision Floating-Point Values,2,2,"xmm, m32", "xmm, xmm"
VUNPCKHPD,Unpack and Interleave High Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VUNPCKHPS,Unpack and Interleave High Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VUNPCKLPD,Unpack and Interleave Low Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VUNPCKLPS,Unpack and Interleave Low Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VXORPD,Bitwise Logical XOR of Packed Double Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VXORPS,Bitwise Logical XOR of Packed Single Precision Floating-Point Values,3,3,"xmm, xmm, m128", "xmm, xmm, xmm", "xmm, m128, xmm"
VZEROALL,Zero All YMM Registers,0,0,""
VZEROUPPER,Zero Upper Bits of YMM Registers,0,0,""
WBINVD,Write Back and Invalidate Cache,0,0,""
WRFSBASE,Write FS Base Address,1,1,"r32", "r64"
WRGSBASE,Write GS Base Address,1,1,"r32", "r64"
WRMSR,Write to Model Specific Register,0,0,""
WRPKRU,Write Protection Key for User Pages,0,0,""
XABORT,Abort Transactional Execution,1,1,"imm8"
XBEGIN,Start Transactional Execution,1,1,"rel16", "rel32"
XCHG,Exchange Register/Memory with Register,2,2,"r8, r/m8", "r16, r/m16", "r32, r/m32", "r64, r/m64"
XCRYPTCBC,Perform CBC Mode Encryption/Decryption,4,4,"xmm, xmm, xmm, xmm"
XCRYPTCFB,Perform CFB Mode Encryption/Decryption,4,4,"xmm, xmm, xmm, xmm"
XCRYPTCTR,Perform CTR Mode Encryption/Decryption,4,4,"xmm, xmm, xmm, xmm"
XCRYPTECB,Perform ECB Mode Encryption/Decryption,3,3,"xmm, xmm, xmm"
XCRYPTOFB,Perform OFB Mode Encryption/Decryption,4,4,"xmm, xmm, xmm, xmm"
XEND,End Transactional Execution,0,0,""
XFENCE,Serialize Store Operations,0,0,""
XGETBV,Read Extended Control Register,0,0,""
XLAT,Table Lookup,0,0,""
XLATB,Table Lookup,0,0,""
XOR,Logical XOR,2,2,"r/m8, r8", "r/m16, r16", "r/m32, r32", "r/m64, r64", "r/m8, imm8", "r/m16, imm16", "r/m32, imm32", "r/m64, imm32", "AL, imm8", "AX, imm16", "EAX, imm32", "RAX, imm32"
XORPD,Bitwise Logical XOR of Packed Double Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
XORPS,Bitwise Logical XOR of Packed Single Precision Floating-Point Values,2,2,"xmm, m128", "xmm, xmm"
XRSTOR,Restore Processor Extended States,1,1,"m"
XRSTOR64,Restore Processor Extended States,1,1,"m"
XRSTORS,Restore Processor Extended States with Supervisor,1,1,"m"
XRSTORS64,Restore Processor Extended States with Supervisor,1,1,"m"
XSAVE,Save Processor Extended States,1,1,"m"
XSAVE64,Save Processor Extended States,1,1,"m"
XSAVEC,Save Processor Extended States with Compaction,1,1,"m"
XSAVEC64,Save Processor Extended States with Compaction,1,1,"m"
XSAVEOPT,Save Processor Extended States with Optimization,1,1,"m"
XSAVEOPT64,Save Processor Extended States with Optimization,1,1,"m"
XSAVES,Save Processor Extended States with Supervisor,1,1,"m"
XSAVES64,Save Processor Extended States with Supervisor,1,1,"m"
XSETBV,Write Extended Control Register,0,0,""
XSHA1,Perform SHA1 Hash,3,3,"xmm, xmm, xmm"
XSHA256,Perform SHA256 Hash,3,3,"xmm, xmm, xmm"
XSTORE,Store Data,1,1,"m"
XTEST,Test If In Transactional Execution,0,0,""