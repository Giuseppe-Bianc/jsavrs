// Calcola la somma di due numeri
fun add(num1: i8, num2: i8): i8 {
    return num1 + num2
}

// Funzione ricorsiva per fattoriale
fun factorial(n: i64): i64 {
    if (n <= 1) {
        return 1
    }
    return n * factorial(n - 1)
}

/* 
   Funzione di utilità per 
   verificare numeri primi 
*/
fun is_prime(num: i64): bool {
    if (num < 2) { return false }
    if (num == 2) { return true }
    if (num % 2 == 0) { return false }
    
    var i: i64 = 3
    while (i * i <= num) {
        if (num % i == 0) {
            return false
        }
        i = i + 2
    }
    return true
}

main {
    // Operazioni aritmetiche
    var x: i64 = 1 + 4 - (12 + 3) / 3
    var y: i8 = 12i8
    var z: char = 'π' // Carattere Unicode
    
    // Array statico
    var primes: i64[5] = {2, 3, 5, 7, 11}
    
    /* 
        Strutture condizionali 
        annidate 
    */
    if (x >= 10) {
        // Chiamata di funzione
        var result: i8 = add(5i8, 3i8)
    } else if (x == 0) {
        x = factorial(5)
    } else {
        // Blocco vuoto
        {}
    }
    
    // Loop complessi
    for (var i: i32 = 0i32; i < 10i32; i = i + 1i32) {
        if (i == 5i32) { continue }
        while (y > 0i8) {
            y = y - 1i8
            if (y == 5i8) { break }
        }
    }
    
    // Array multidimensionale
    var matrix: i8[2][3] = {{1i8, 2i8, 3i8}, {4i8, 5i8, 6i8}}
    
    // Switch-case (simulato)
    var choice: i8 = 2i8
    if (choice == 1i8) {
        /* Gestione caso 1 */
    } else if (choice == 2i8) {
        // Gestione caso principale
        var tmp: char = '\n' // Carattere speciale
    } else {
        // Default case
    }
    
    // Operazioni logiche
    var flag: bool = true && false || (x != y)
}